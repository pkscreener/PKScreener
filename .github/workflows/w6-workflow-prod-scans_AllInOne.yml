# """
#     The MIT License (MIT)

#     Copyright (c) 2023 pkjmesra

#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the "Software"), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:

#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.

#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

# """
name: 6. Production Scans All In One
on:
  workflow_dispatch:
    inputs:
      branch-name:
        description: 'Branch name'
        required: false
        default: 'main'
      targetPythonVersion:
        description: 'Target Python version: 3.9 , 3.10, 3.11 ?'
        required: false
        type: string
        default: '3.11'
  # workflow_run:
  #   workflows: ["0. New Features - Tests"]
  #   types:
  #     - completed
  workflow_call:
    inputs:
      branch-name:
        required: true
        type: string
        default: 'new-features'
      targetPythonVersion:
        description: 'Target Python version: 3.9 , 3.10, 3.11 ?'
        required: false
        type: string
        default: '3.11'
jobs:

  Prod_Scans_AllInOne:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ inputs.branch-name }}
        repository: pkjmesra/PKScreener
        token: ${{secrets.PK_GITHUB_TOKEN}}

    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.targetPythonVersion || 3.11 }}

    - name: Restore Dependencies from Cache
      uses: actions/cache@v2
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install TA-Lib
      shell: bash
      run: |
        python3 -m pip install --upgrade pip
        cd .github/dependencies/
        if [[ "${{ inputs.targetPythonVersion }}" == "" ]] ;then
          pip3 install TA_Lib-0.4.28-cp311-cp311-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.9" ]] ;then
          pip3 install TA_Lib-0.4.19-cp39-cp39-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.11" ]] ;then
          pip3 install TA_Lib-0.4.28-cp311-cp311-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.12" ]] ;then
          pip3 install TA_Lib-0.4.28-cp312-cp312-win_amd64.whl
        fi

    - name: Install Python Dependencies
      run: |
        pip3 install -r requirements.txt
        pip3 install .
        
    - name: Configure env.dev file
      run: |
        python3 -c "import os; file = open('.env.dev', 'w'); file.write('CHAT_ID='+os.environ['CHAT_ID_DEV']+'\n'); file.write('TOKEN='+os.environ['TOKEN_DEV']+'\n'); file.write('chat_idADMIN='+os.environ['CHAT_IDADMIN_DEV']+'\n'); file.close()"
      shell: bash
      env:
        CHAT_ID_DEV : ${{secrets.CHAT_ID_DEV}}
        TOKEN_DEV : ${{secrets.TOKEN_DEV}}
        CHAT_IDADMIN_DEV : ${{secrets.CHAT_IDADMIN_DEV}}

    - name: Barometer
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -e --barometer
      env:
          RUNNER : "GitHub_Actions"

    - name: Morning vs evening square off
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -e -o C:12 --runintradayanalysis
      env:
          RUNNER : "GitHub_Actions"

    - name: 2.10 Momentum gainers (Rising bullish momentum)
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:6:3 -e
      env:
          RUNNER : "GitHub_Actions"

    - name: 2.1 All relevant technical indicators
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:0 -e
      env:
          RUNNER : "GitHub_Actions"

    - name: 2.2 Probable breakouts
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:1 -e
      env:
          RUNNER : "GitHub_Actions"

    - name: 2.3 Recent breakouts and volumes
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:2 -e
      env:
          RUNNER : "GitHub_Actions"

    - name: 2.4 Volume gainers/shockers
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:9:2.5 -e
      env:
          RUNNER : "GitHub_Actions"
  
    - name: 2.5 Stocks gaining at least 2% since last 3 sessions
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:10 -e
      env:
          RUNNER : "GitHub_Actions"

    - name: 2.6 Short term bullish stocks
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:11 -e
      env:
          RUNNER : "GitHub_Actions"

    - name: 2.7 CCI outside the -100,+150 range
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:8:-100:150 -e
      env:
          RUNNER : "GitHub_Actions"

    - name: 2.8 Buy signals(Bullish reversals)
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:6:1 -e
      env:
          RUNNER : "GitHub_Actions"

    - name: 2.9 Sell signals(bearish reversals)
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:6:2 -e
      env:
          RUNNER : "GitHub_Actions"
  
    - name: 2.11 NR4 daily
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:14 -e
      env:
          RUNNER : "GitHub_Actions"

    - name: 21. Most Popular stocks by change of shares
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:12:21:1 -e
      env:
          RUNNER : "GitHub_Actions"

    - name: 1. Next day Nifty/Market AI prediction
      shell: cmd
      run: |
        python3 pkscreener/pkscreenercli.py -a Y -p -o X:N -e
      env:
          RUNNER : "GitHub_Actions"

  # Delete_Workflow_Run:
  #   runs-on: ubuntu-20.04
  #   needs: [Prod_Scans_AllInOne]
  #   name: Delete workflow run
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         ref: main
          
  #     - name: Delete this workflow run
  #       if: startsWith(runner.os, 'Linux')
  #       shell: bash
  #       run: |
  #         for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"success\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
  #         # Cancel runs queued or in_progress. See https://cli.github.com/manual/gh_run_list
  #         # for id in $(gh run list -w "13. Backtest for Generic" --limit 100 --jq ".[] | select (.status == \"queued\" ) | .databaseId" --json databaseId,status); do gh run cancel $id; done 
  #       env:
  #         GH_TOKEN : ${{secrets.GITHUB_TOKEN}}