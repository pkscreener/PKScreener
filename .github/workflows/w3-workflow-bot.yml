# """
#     The MIT License (MIT)

#     Copyright (c) 2023 pkjmesra

#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the "Software"), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:

#     The above copyright notice and this permission notice shall be included in all
#     copies or substantial portions of the Software.

#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#     SOFTWARE.

# """
name: 3. PTB
on:
  workflow_dispatch:
    inputs:
      branch-name:
        description: 'Branch name'
        required: false
        default: 'main'
      installtalib:
        description: 'Is TA-Lib install required? (Y/N)'
        required: false
        default: 'N'
      targetPythonVersion:
        description: 'Target Python version: 3.9 , 3.10, 3.11 ?'
        required: false
        type: string
        default: '3.12'
      runson:
          description: 'Runner OS. e.g: ubuntu-latest, windows-latest or macos-latest or ubuntu-22.04-arm or ubuntu-24.04-arm'
          required: false
          default: 'ubuntu-latest'
      cliOptions:
        description: 'Enable Logging in the target app or pass any args to bot'
        required: false
        default: '-a Y -l'
      DOWNLOAD_URL:
        description: 'Download URL override for the bot. Provide full URL.'
        required: false
        default: ''
      targetArch:
        description: 'Target OS processor architecture? arm64 or x64 ?'
        required: false
        type: string
        default: 'x64'
  # push:
  #   branches: [ main ]
    # workflow_run:
    #   workflows: ["0. New Features - Tests"]
    #   types:
    #     - completed
    # workflow_call:
    #   inputs:
    #     branch-name:
    #       required: true
    #       type: string
    #       default: 'new-features'
  schedule:
    - cron: '59 * * * *'

jobs:

  Prod_Telegram_Bot:
    # https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
    runs-on: ${{ inputs.runson || 'ubuntu-latest' }} #ubuntu-latest #windows-latest ubuntu-24.04-arm, ubuntu-22.04-arm

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch-name }}
        # repository: pkjmesra/PKScreener
        # token: ${{secrets.PK_GITHUB_TOKEN}}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.targetPythonVersion || 3.12 }}

    - name: Restore Dependencies from Windows Cache
      if: startsWith(runner.os, 'Windows')
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
  
    - name: Load Cache for Linux Dependencies
      uses: actions/cache@v4
      if: startsWith(runner.os, 'Linux')
      with:
        path: |
          /usr/include/ta-lib
          /usr/bin/ta-lib-config
          /usr/lib/libta_lib.la
          /usr/lib/libta_lib.a
        key: ${{ runner.os }}-talib
        restore-keys: |
          ${{ runner.os }}-talib
        
    - name: Restore Dependencies from Ubuntu Cache
      if: startsWith(runner.os, 'Linux')
      uses: actions/cache@v4
      id: cache-venv  # name for referring later
      with:
        path: ./.venv/  # what we cache: the virtualenv
        # The cache key depends on requirements.txt
        key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-

    - name: Install TA-Lib for Windows
      if: ${{ inputs.installtalib == 'Y' && startsWith(runner.os, 'Windows') }}
      shell: bash
      run: |
        python3 -m pip install --upgrade pip
        pip3 install requests
        cd .github/dependencies/
        if [[ "${{ inputs.targetPythonVersion }}" == "" ]] ;then
          pip3 install TA_Lib-0.4.28-cp312-cp312-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.9" ]] ;then
          pip3 install TA_Lib-0.4.19-cp39-cp39-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.11" ]] ;then
          pip3 install TA_Lib-0.4.28-cp311-cp311-win_amd64.whl
        elif [[ "${{ inputs.targetPythonVersion }}" == "3.12" ]] ;then
          pip3 install TA_Lib-0.4.28-cp312-cp312-win_amd64.whl
        fi

    - name: Install TA-Lib for Linux
      if: ${{ inputs.installtalib == 'Y' && startsWith(runner.os, 'Linux') }}
      run: |
        cd .github/dependencies/
        pwd
        sudo dpkg -i ta-lib_0.6.4_amd64.deb
        cd /home/runner/work/PKScreener/PKScreener/
        pip3 install ta-lib

    - name: Environment setup to get latest EXE
      shell: bash
      id: releaseurlsetter
      run: |
        pip3 install requests
        python3 .github/workflows/githubutilities.py -d

    - name: Download latest executable on Windows
      shell: cmd
      if: startsWith(runner.os, 'Windows')
      env:
        exe_path: ${{ inputs.DOWNLOAD_URL || steps.releaseurlsetter.outputs.DOWNLOAD_URL }}
      run: |
        curl -o pkscreenercli.exe -JL %exe_path%

    - name: Download latest executable on Ubuntu
      shell: bash
      if: startsWith(runner.os, 'Linux')
      env:
        exe_path: ${{ inputs.DOWNLOAD_URL || steps.releaseurlsetter.outputs.DOWNLOAD_URL }}
      run: |
        curl -o /home/runner/work/PKScreener/PKScreener/pkscreenercli_x64.bin -JL $exe_path
        chmod +x /home/runner/work/PKScreener/PKScreener/pkscreenercli_x64.bin
        
    - name: Configure env.dev file
      run: |
        python3 -c "import os; file = open('.env.dev', 'w'); file.write('CHAT_ID='+os.environ['CHAT_ID_DEV']+'\n'); file.write('TOKEN='+os.environ['TOKEN_DEV']+'\n'); file.write('chat_idADMIN='+os.environ['CHAT_IDADMIN_DEV']+'\n'); file.write('TDU='+os.environ['TDU']+'\n'); file.write('TAT='+os.environ['TAT']+'\n'); file.write('GITHUB_TOKEN='+os.environ['GITHUB_TOKEN']+'\n'); file.write('MCU='+os.environ['MCU']+'\n'); file.write('MCAP='+os.environ['MCAP']+'\n'); file.write('MCL='+os.environ['MCL']+'\n'); file.write('MS='+os.environ['MS']+'\n'); file.write('PKG='+os.environ['PKG']+'\n'); file.write('REPO_URL=https://github.com/pkscreener/PKScreener.git'+'\n'); file.close()"
      shell: bash
      env:
        CHAT_ID_DEV : ${{secrets.CHAT_ID_DEV}}
        TOKEN_DEV : ${{secrets.TOKEN_DEV}}
        CHAT_IDADMIN_DEV : ${{secrets.CHAT_IDADMIN_DEV}}
        GITHUB_TOKEN : ${{secrets.GITHUB_TOKEN}}
        TDU : ${{secrets.TURSO_DATABASE_URL}}
        TAT : ${{secrets.TURSO_AUTH_TOKEN}}
        MCU: ${{secrets.MAIL_CLIENT_USERNAME}}
        MCAP: ${{secrets.MAIL_CLIENT_APP_PWD}}
        MCL: ${{secrets.MAIL_CLIENT_LABEL}}
        MS: ${{secrets.MAIL_SENDER}}
        PKG: ${{secrets.PK_GITHUB_TOKEN}}

    - name: Run Telegram bot on Windows
      shell: cmd
      timeout-minutes: 350
      continue-on-error: true
      if: startsWith(runner.os, 'Windows')
      env:
        RUNNER : "GitHub_Actions"
        MONITORING_BOT_RUNNER: "MONITORING_BOT_RUNNER"
      run: |
        pkscreenercli.exe --bot --botavailable ${{ inputs.cliOptions || '' }}

    - name: Telegram Bot on Ubuntu
      timeout-minutes: 350
      continue-on-error: true
      shell: bash
      if: startsWith(runner.os, 'Linux')
      env:
        RUNNER : "GitHub_Actions"
        MONITORING_BOT_RUNNER: "MONITORING_BOT_RUNNER"
      run: |
        /home/runner/work/PKScreener/PKScreener/pkscreenercli_x64.bin --bot --botavailable ${{ inputs.cliOptions || '' }}

    - name: Delete this repo workflow run
      shell: bash
      run: |
        gh run list --status success --limit 400 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
        gh run list --status cancelled --limit 400 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
        gh run list --status completed --limit 400 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
      env:
        GH_TOKEN : ${{secrets.GITHUB_TOKEN}}

    - name: Delete original repo workflow runs
      shell: bash
      run: |
        gh run list --status success --limit 400 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
        gh run list --status cancelled --limit 400 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
        gh run list --status completed --limit 400 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
      env:
        GH_TOKEN : ${{secrets.PK_GITHUB_TOKEN}}

  # Delete_Workflow_Run:
  #   runs-on: ubuntu-latest
  #   needs: [Prod_Telegram_Bot]
  #   name: Delete workflow run
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: main
          
  #     - name: Delete this workflow run
  #       if: startsWith(runner.os, 'Linux')
  #       shell: bash
  #       run: |
  #         gh run list --status success --limit 400 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
  #         gh run list --status cancelled --limit 400 --json databaseId -q '.[].databaseId' | xargs -IID gh api "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" -X DELETE
  #         # for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"success\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
  #         # for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"cancelled\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
  #         # for id in $(gh run list --limit 100 --jq ".[] | select (.status == \"failure\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
  #         # for id in $(gh run list -w "CodeQL" --limit 100 --jq ".[] | select (.status == \"completed\" ) | .databaseId" --json databaseId,status); do gh run delete $id; done
          
  #         # Cancel runs queued or in_progress. See https://cli.github.com/manual/gh_run_list
  #         # for id in $(gh run list -w "13. Backtest for Generic" --limit 100 --jq ".[] | select (.status == \"queued\" ) | .databaseId" --json databaseId,status); do gh run cancel $id; done 
  #       env:
  #         GH_TOKEN : ${{secrets.GITHUB_TOKEN}}
